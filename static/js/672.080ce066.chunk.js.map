{"version":3,"file":"static/js/672.080ce066.chunk.js","mappings":"mQA6BMA,EAAqBC,EAAAA,KAAaC,MAAM,CAC5CC,MAAOF,EAAAA,KAEJG,QAAQ,kCAAmC,8BAC3CD,MAAM,sBACNE,SAAS,qBACZC,SAAUL,EAAAA,KAEPG,QACC,sDACA,2DAEDG,IAAI,EAAG,0CACPC,IAAI,GAAI,YACRH,SAAS,yBAGRI,EAAW,WACf,OACE,SAAC,KAAD,CAAKC,MAAO,GAAIC,OAAQ,GAAxB,UACE,gBAAKC,KAAMC,EAAAA,EAAQ,iBAGxB,EAEKC,EAAU,WACd,OACE,SAAC,KAAD,CAAKJ,MAAO,GAAIC,OAAQ,GAAxB,UACE,gBAAKC,KAAMC,EAAAA,EAAQ,eAGxB,EAEYE,EAAU,WACrB,OAA4CC,EAAAA,EAAAA,UAASP,GAArD,eAAOQ,EAAP,KAAuBC,EAAvB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,YAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAmBMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEC,cAbe,CACnBpB,MAAO,GACPG,SAAU,IAYNkB,iBAAkBxB,EAClByB,SAVe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GAASO,EAAAA,EAAAA,GAAUF,IACnBC,GACD,EAIG,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,UAAO,WACP,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEE,YAAY,QACZC,MAAM,QACNC,KAAK,QACLC,KAAK,WAEP,SAAC,KAAD,CAAOC,UAAU,MAAMD,KAAK,cAE9B,UAAC,KAAD,YACE,SAAC,KAAD,CACEH,YAAY,WACZC,MAAM,WACNE,KAAK,WACLD,KAAMZ,KAER,SAAC,KAAD,CAASe,QAhDG,SAAAC,GACL,aAAbhB,GACFC,EAAY,QACZF,EAAkBJ,KAElBM,EAAY,YACZF,EAAkBT,GAErB,EAwCW,SAAoCQ,KACpC,SAAC,KAAD,CAAOgB,UAAU,MAAMD,KAAK,oBAGhC,SAAC,KAAD,CAAQD,KAAK,SAAb,SAAsB,WACtB,UAAC,KAAD,WAAM,4BAEJ,SAAC,KAAD,WACE,SAAC,KAAD,CAAMK,GAAG,YAAT,SAAqB,4BAOlC,ECzHD,EAPkB,WAChB,OACE,SAACrB,EAAD,GAGH,C","sources":["components/AuthFormLogin/AuthFormLogin.js","pages/Login.js"],"sourcesContent":["// Компонент містить в собі форму з полями логінізації та кнопкою Login і елементом навігації Register\n//  - кнопка Login - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд щодо авторизації користувача.  У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлення\n//  - елемент навігації Register - переадресовує користувача на сторінку RegisterPage\n\n//  Всі поля форми валідуються і виводять користувачу відповідну інформацію у випадку, якщо введене значення не валідне\n\n//  Після авторизації користувач повинен бути переадресований на сторінку UserPage. Якщо з бекенда було отримано помилку авторизації - користувачу необхідно вивести  відповідну інформацію і вигляді нотіфікації\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { userLogin } from 'Redux/auth/operation';\nimport icons from 'images/icons.svg';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Link,\n  Span,\n  Text,\n  Title,\n  Wrapper,\n  StyledForm,\n  Input,\n  Error,\n  Label,\n  IconPas,\n  SVG,\n} from '../AuthFormRegister/AuthFormRegister.styled';\n\nconst yupLoginValidation = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .email('Enter a Vaid Email')\n    .required('Email is Required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must contain one capital letter and one number'\n    )\n    .min(6, 'Password Should be minimum 8 character')\n    .max(16, 'Too long')\n    .required('Enter Your Password'),\n});\n\nconst eyeCosed = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-closed'}></use>\n    </SVG>\n  );\n};\n\nconst eyeOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-open'}></use>\n    </SVG>\n  );\n};\n\nexport const LogForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(eyeCosed);\n  const [typePass, setTypePass] = useState('password');\n\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(eyeOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(eyeCosed);\n    }\n  };\n\n\n\n  const initialValue = {\n    email: '',\n    password: '',\n  };\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(userLogin(values));\n    resetForm();\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={yupLoginValidation}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <Title>Login</Title>\n          <Box>\n            <Label>\n              <Input\n                placeholder=\"Email\"\n                label=\"Email\"\n                type=\"Email\"\n                name=\"email\"\n              />\n              <Error component=\"div\" name=\"email\" />\n            </Label>\n            <Label>\n              <Input\n                placeholder=\"Password\"\n                label=\"Password\"\n                name=\"password\"\n                type={typePass}\n              />\n              <IconPas onClick={togglePassInput}>{toggleIconPass}</IconPas>\n              <Error component=\"div\" name=\"password\" /> \n            </Label>\n          </Box>\n          <Button type=\"submit\">Login</Button>\n          <Text>\n            Already have an account?\n            <Span>\n              <Link to=\"/register\">Registration</Link>\n            </Span>\n          </Text>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n","import { LogForm } from \"components/AuthFormLogin/AuthFormLogin\";\n\nconst LoginPage = () => {\n  return (\n    <LogForm/>\n\n  );\n};\n\nexport default LoginPage;"],"names":["yupLoginValidation","yup","shape","email","matches","required","password","min","max","eyeCosed","width","height","href","icons","eyeOpen","LogForm","useState","toggleIconPass","setToggleIconPass","typePass","setTypePass","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","userLogin","placeholder","label","type","name","component","onClick","e","to"],"sourceRoot":""}