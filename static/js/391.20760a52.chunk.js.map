{"version":3,"file":"static/js/391.20760a52.chunk.js","mappings":"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","sources":["components/AddPetFormButtons/BackLink.styled.jsx","components/AddPetFormButtons/BackLink.js","components/CategoryStep/CategoryStep.styled.jsx","components/AddPetFormButtons/NextButton.styled.jsx","components/AddPetFormButtons/AddPetFormButtonWrapper.styled.jsx","components/CategoryStep/CategoryStep.js","components/AddPetFormButtons/AddPetFormNextButton.js","components/PersonalDetailsStep/PersonalDetailsStep.styled.jsx","components/PersonalDetailsStep/PersonalDetailsStep.js","components/MoreInfoStep/MoreInfoStep.styled.jsx","components/MoreInfoStep/MoreInfoStep.js","components/AddPetForm/AddPetForm.styled.jsx","components/AddPetForm/AddPetForm.js","pages/AddPet.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n// Define a reusable CSS block using the css function\nexport const BackButton = css`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  color: var(--cl-blue-link);\n  background-color: transparent;\n  border: none;\n  text-decoration: none;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: calc(22 / 16);\n  height: 22px;\n`;\n\nexport const StyledLink = styled(Link)`\n  ${BackButton}\n`;\n\nexport const AddPetBackButton = styled.button`\n  ${BackButton}\n`;\n","import { StyledLink, AddPetBackButton } from './BackLink.styled';\nimport icons from 'images/icons.svg';\n\nconst BackLink = ({ isLink, buttonText, to, handleClick, type }) => {\n  if (isLink) {\n    return (\n      <StyledLink to={to} onClick={handleClick}>\n        <svg width={24} height={24}>\n          <use href={icons + '#arrow-left'} />\n        </svg>\n        {buttonText}\n      </StyledLink>\n    );\n  } else {\n    return (\n      <AddPetBackButton onClick={handleClick} type={type}>\n        <svg width={24} height={24}>\n          <use href={icons + '#arrow-left'} />\n        </svg>\n        {buttonText}\n      </AddPetBackButton>\n    );\n  }\n};\n\nexport default BackLink;\n","import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const CategoryStepContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n  margin-bottom: 91px;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 137px;\n  }\n`;\n\nexport const RadioButton = styled(Field)`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n\nexport const CategoryStepLabel = styled.label`\n  width: fit-content;\n  position: relative;\n  padding: 8px 16px;\n  cursor: pointer;\n  border-radius: 40px;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(19 / 14);\n  letter-spacing: 0.04em;\n  color: var(--cl-blue-link);\n  background-color: var(--cl-blue-light);\n\n  transition: background-color var(--animat), color var(--animat);\n\n  &:hover,\n  &:focus,\n  ${RadioButton}:checked + & {\n    background-color: var(--cl-blue-link);\n    color: var(--cl-background);\n  }\n`;\n","import styled from 'styled-components';\n\nexport const NextButton = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  background-color: var(--cl-blue-link);\n  min-width: 248px;\n  padding: 9px 0;\n  border: none;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: calc(22 / 16);\n  letter-spacing: 0.04em;\n  color: var(--cl-background);\n  border-radius: 40px;\n\n  cursor: pointer;\n\n  &:disabled {\n    color: var(--cl-gray);\n    background-color: var(--cl-blue-light);\n    pointer-events: none;\n  }\n`;\n\nexport const PawIcon = styled.svg`\n  fill: var(--cl-background);\n`;\n","import styled from 'styled-components';\nexport const AddPetFormButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    gap: 24px;\n  }\n`;\n","import { useRef, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport BackLink from '../AddPetFormButtons/BackLink';\nimport {\n  CategoryStepContainer,\n  CategoryStepLabel,\n  RadioButton,\n} from './CategoryStep.styled';\nimport icons from '../../images/icons.svg';\nimport {\n  NextButton,\n  PawIcon,\n} from 'components/AddPetFormButtons/NextButton.styled';\nimport { AddPetFormButtonWrapper } from 'components/AddPetFormButtons/AddPetFormButtonWrapper.styled';\n\nconst CategoryStep = ({ onNext, onSelectCategory, selectedCategory }) => {\n  const location = useLocation();\n  const locRef = useRef(location.state?.from ?? '/main'); // for Back button\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  useEffect(() => {\n    !selectedCategory ? setIsDisabled(true) : setIsDisabled(false);\n  }, [selectedCategory]);\n\n  const handleCategoryChange = event => {\n    const selectedCategory = event.target.value;\n    onSelectCategory(selectedCategory);\n  };\n\n  return (\n    <>\n      {/* Radio buttons for selecting a category */}\n      <CategoryStepContainer>\n        <RadioButton\n          type=\"radio\"\n          name=\"category\"\n          value=\"your-pet\"\n          id=\"your-pet\"\n          checked={selectedCategory === 'your-pet'}\n          onChange={handleCategoryChange}\n        />\n        <CategoryStepLabel htmlFor=\"your-pet\">\n          {/* Initial selection is \"your pet\" */}\n          your pet\n        </CategoryStepLabel>\n        <RadioButton\n          type=\"radio\"\n          name=\"category\"\n          value=\"sell\"\n          id=\"sell\"\n          checked={selectedCategory === 'sell'}\n          onChange={handleCategoryChange}\n        />\n        <CategoryStepLabel htmlFor=\"sell\">sell</CategoryStepLabel>\n        <RadioButton\n          type=\"radio\"\n          name=\"category\"\n          value=\"lost-found\"\n          id=\"lost-found\"\n          checked={selectedCategory === 'lost-found'}\n          onChange={handleCategoryChange}\n        />\n        <CategoryStepLabel htmlFor=\"lost-found\">lost/found</CategoryStepLabel>\n        <RadioButton\n          type=\"radio\"\n          name=\"category\"\n          value=\"for-free\"\n          id=\"for-free\"\n          checked={selectedCategory === 'for-free'}\n          onChange={handleCategoryChange}\n        />\n        <CategoryStepLabel htmlFor=\"for-free\">in good hands</CategoryStepLabel>\n      </CategoryStepContainer>\n      <AddPetFormButtonWrapper>\n        <BackLink to={locRef.current} buttonText=\"Cancel\" isLink={true} />\n        {/* Cancel button, must be changed to BackLink */}\n        <NextButton type=\"button\" onClick={onNext} disabled={isDisabled}>\n          {/* Proceed to the next step */}\n          Next\n          <PawIcon width={24} height={24}>\n            <use href={icons + '#pawprint'} />\n          </PawIcon>\n        </NextButton>\n      </AddPetFormButtonWrapper>\n    </>\n  );\n};\n\nexport default CategoryStep;\n","import { NextButton, PawIcon } from './NextButton.styled';\nimport icons from '../../images/icons.svg';\n\nconst AddPetFormNextButton = ({ buttonText, type, onClick, disabled }) => {\n  return (\n    <NextButton type={type} onClick={onClick} disabled={disabled}>\n      {buttonText}\n      <PawIcon width={24} height={24}>\n        <use href={icons + '#pawprint'} />\n      </PawIcon>\n    </NextButton>\n  );\n};\n\nexport default AddPetFormNextButton;\n","import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const PersonalDetailsStepContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 44px;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const PersonalDetailsField = styled.div`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 768px) {\n    &:not(:last-child) {\n      margin-bottom: 24px;\n    }\n  }\n`;\n\nexport const PersonalDetailsStepLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(19 / 14);\n  color: var(--cl-black);\n\n  @media screen and (min-width: 768px) {\n    gap: 8px;\n    font-size: 20px;\n    line-height: calc(26 / 20);\n  }\n`;\n\nexport const PersonalDetailsStepInput = styled(Field)`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  border-radius: 40px;\n  padding: 10px 16px;\n  color: var(--cl-gray);\n\n  border: 1px solid var(--cl-blue-link);\n  outline: var(--cl-blue-link);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import { ErrorMessage, useFormikContext } from 'formik';\nimport { useState, useEffect, useCallback } from 'react';\nimport AddPetFormNextButton from 'components/AddPetFormButtons/AddPetFormNextButton';\nimport BackLink from '../AddPetFormButtons/BackLink';\nimport {\n  PersonalDetailsField,\n  PersonalDetailsStepContainer,\n  PersonalDetailsStepInput,\n  PersonalDetailsStepLabel,\n} from './PersonalDetailsStep.styled';\nimport { AddPetFormButtonWrapper } from 'components/AddPetFormButtons/AddPetFormButtonWrapper.styled';\n\nconst PersonalDetailsStep = ({\n  onBack,\n  onNext,\n  selectedCategory,\n  setFormValues,\n}) => {\n  const { values, setTouched } = useFormikContext();\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  // Function to validate form fields. useCallback is used to memoize the validateFields function\n  const validateFields = useCallback(() => {\n    let formErrors = {};\n\n    // Validate title field if category is 'sell', 'lost-found' or 'for-free'\n    if (selectedCategory !== 'your-pet') {\n      if (!values.title) {\n        formErrors.title = 'Title is required';\n      }\n    }\n\n    // Validate name field\n    if (!values.name) {\n      formErrors.name = 'Name is required';\n    }\n\n    // Validate date field\n    if (!values.date) {\n      formErrors.date = 'Date of birth is required';\n    }\n\n    // Validate breed field\n    if (!values.breed) {\n      formErrors.breed = 'Breed is required';\n    } else if (values.breed.length < 2) {\n      formErrors.breed = 'Breed must be at least 2 characters';\n    } else if (values.breed.length > 16) {\n      formErrors.breed = 'Breed must be at most 16 characters';\n    }\n\n    return formErrors;\n  }, [selectedCategory, values]);\n\n  // Handle next button click\n  const handleNextClick = () => {\n    // setTouched is called to mark all form fields as touched\n    setTouched({\n      title: true,\n      name: true,\n      date: true,\n      breed: true,\n    });\n\n    const formErrors = validateFields();\n\n    if (Object.keys(formErrors).length === 0) {\n      setFormValues(prevState => ({\n        ...prevState,\n        title: values.title,\n        name: values.name,\n        date: values.date,\n        breed: values.breed,\n      }));\n      onNext();\n    }\n  };\n\n  // Update disabled state based on form field validation\n  useEffect(() => {\n    const formErrors = validateFields();\n    setIsDisabled(Object.keys(formErrors).length > 0);\n  }, [values, selectedCategory, validateFields]); //  When any of these values change, the effect will run again to update the disabled state\n\n  return (\n    <>\n      <PersonalDetailsStepContainer>\n        {/* Field \"title\" is only for the \"sell\" and \"lost\" categories */}\n        {selectedCategory !== 'your-pet' && (\n          <PersonalDetailsField>\n            <PersonalDetailsStepLabel>\n              Title of add\n              <PersonalDetailsStepInput\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Type title\"\n              />\n            </PersonalDetailsStepLabel>\n            <ErrorMessage\n              name=\"title\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </PersonalDetailsField>\n        )}\n\n        {/* Input field for capturing the name of the pet */}\n        <PersonalDetailsField>\n          <PersonalDetailsStepLabel>\n            Pet’s name\n            <PersonalDetailsStepInput\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Type name pet\"\n            />\n          </PersonalDetailsStepLabel>\n          <ErrorMessage name=\"name\" component=\"div\" className=\"error-message\" />\n        </PersonalDetailsField>\n        {/* Input field for capturing the date of birth of the pet */}\n        <PersonalDetailsField>\n          <PersonalDetailsStepLabel>\n            Date of birth\n            <PersonalDetailsStepInput\n              type=\"text\"\n              name=\"date\"\n              placeholder=\"Type date of birth\"\n            />\n          </PersonalDetailsStepLabel>\n          <ErrorMessage name=\"date\" component=\"div\" className=\"error-message\" />\n        </PersonalDetailsField>\n        {/* Input field for capturing the breed of the pet */}\n        <PersonalDetailsField>\n          <PersonalDetailsStepLabel>\n            Breed\n            <PersonalDetailsStepInput\n              type=\"text\"\n              name=\"breed\"\n              placeholder=\"Type breed\"\n            />\n          </PersonalDetailsStepLabel>\n          <ErrorMessage\n            name=\"breed\"\n            component=\"div\"\n            className=\"error-message\"\n          />\n        </PersonalDetailsField>\n      </PersonalDetailsStepContainer>\n      <AddPetFormButtonWrapper>\n        {/* Button to navigate to the previous step */}\n        <BackLink\n          type=\"button\"\n          buttonText=\"Back\"\n          handleClick={onBack}\n          isLink={false}\n        />\n        {/* Button to navigate to the next step */}\n        <AddPetFormNextButton\n          type=\"button\"\n          onClick={handleNextClick}\n          disabled={isDisabled}\n          buttonText=\"Next\"\n        />\n      </AddPetFormButtonWrapper>\n    </>\n  );\n};\n\nexport default PersonalDetailsStep;\n","import { Field } from 'formik';\nimport styled, { css } from 'styled-components';\n\nexport const MoreInfoStepContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 60px;\n    ${({ selectedCategory }) =>\n      selectedCategory !== 'your-pet'\n        ? 'flex-direction: row; column-gap: 45px'\n        : ''};\n  }\n`;\n\nexport const SexAvatarFieldWrapper = styled.div`\n  display: flex;\n  gap: 16px;\n\n  ${({ selectedCategory }) =>\n    selectedCategory !== 'your-pet' ? 'flex-direction: column;' : ''}\n\n  @media screen and (min-width: 768px) {\n    ${({ selectedCategory }) =>\n      selectedCategory !== 'your-pet' ? 'row-gap: 45px;' : ''};\n  }\n`;\n\nexport const LocationPriceCommentFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    gap: 24px;\n  }\n`;\n\nexport const SexFieldTitle = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(19 / 14);\n  margin-bottom: 8px;\n  color: var(--cl-black);\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n    line-height: calc(26 / 20);\n  }\n`;\n\nexport const SexRadioButtonsWrapper = styled.div`\n  display: flex;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const RadioButton = styled(Field)`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n\nexport const SexLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  cursor: pointer;\n\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  color: var(--cl-gray);\n\n  transition: color var(--animat);\n\n  &:hover,\n  &:focus,\n  ${RadioButton}:checked + & {\n    color: var(--cl-green);\n  }\n`;\n\nexport const AvatarLabel = styled.label`\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(19 / 14);\n  color: var(--cl-black);\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n    line-height: calc(26 / 20);\n\n    ${({ selectedCategory }) =>\n      selectedCategory !== 'your-pet'\n        ? 'flex-direction: column;column-gap: 12px'\n        : ''}\n  }\n`;\n\nexport const AvatarWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  overflow: hidden;\n  object-position: center;\n  object-fit: cover;\n`;\n\nexport const AvatarField = styled.input`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n\nexport const MoreInfoStepLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: calc(19 / 14);\n  color: var(--cl-black);\n\n  @media screen and (min-width: 768px) {\n    gap: 8px;\n    font-size: 20px;\n    line-height: calc(26 / 20);\n  }\n`;\n\nexport const Input = css`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  border-radius: 40px;\n  padding: 10px 16px;\n  color: var(--cl-gray);\n\n  border: 1px solid var(--cl-blue-link);\n  outline: var(--cl-blue-link);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const MoreInfoStepInput = styled(Field)`\n  ${Input}\n`;\n\nexport const MoreInfoStepTextArea = styled(Field)`\n  ${Input}\n  resize: none;\n  height: 92px;\n\n  border-radius: 20px;\n\n  @media screen and (min-width: 768px) {\n    height: 79px;\n\n    ${({ category }) => (category === 'lost-found' ? 'height: 182px' : '')}\n  }\n`;\n","import { useState, useCallback, useEffect } from 'react';\nimport { ErrorMessage, useFormikContext } from 'formik';\nimport icons from '../../images/icons.svg';\nimport { AddPetFormButtonWrapper } from 'components/AddPetFormButtons/AddPetFormButtonWrapper.styled';\nimport {\n  AvatarField,\n  AvatarLabel,\n  AvatarWrapper,\n  LocationPriceCommentFieldWrapper,\n  MoreInfoStepContainer,\n  MoreInfoStepInput,\n  MoreInfoStepLabel,\n  MoreInfoStepTextArea,\n  RadioButton,\n  SexAvatarFieldWrapper,\n  SexFieldTitle,\n  SexLabel,\n  SexRadioButtonsWrapper,\n} from './MoreInfoStep.styled';\nimport BackLink from 'components/AddPetFormButtons/BackLink';\nimport AddPetFormNextButton from 'components/AddPetFormButtons/AddPetFormNextButton';\n\nconst MoreInfoStep = ({\n  onBack,\n  selectedCategory,\n  setFormValues,\n  handleSubmit,\n}) => {\n  const { values, setTouched, setFieldValue } = useFormikContext();\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  const handleChange = event => {\n    setFieldValue('avatar', event.target.files[0]);\n  };\n\n  console.log(values);\n\n  // Function to validate form fields. useCallback is used to memoize the validateFields function\n  const validateFields = useCallback(() => {\n    let formErrors = {};\n\n    if (selectedCategory !== 'your-pet') {\n      if (!values.sex) {\n        formErrors.sex = 'Sex is required';\n      }\n      if (!values.location) {\n        formErrors.location = 'Location is required';\n      }\n    }\n\n    if (selectedCategory === 'sell') {\n      if (!values.price) {\n        formErrors.price = 'Price is required';\n      }\n    }\n\n    if (!values.avatar) {\n      formErrors.avatar = 'Avatar is required';\n    }\n\n    // Validate comments field\n    if (!values.comments) {\n      formErrors.comments = 'Comments are required';\n    } else if (values.comments.length < 8) {\n      formErrors.comments = 'Comments must be at least 8 characters';\n    } else if (values.comments.length > 120) {\n      formErrors.comments = 'Comments must be at most 120 characters';\n    }\n    return formErrors;\n  }, [selectedCategory, values]);\n\n  // Handle next button click\n  const handleSubmitClick = () => {\n    setTouched({\n      sex: true,\n      location: true,\n      price: true,\n      avatar: true,\n      comments: true,\n    });\n\n    const formErrors = validateFields();\n\n    if (Object.keys(formErrors).length === 0) {\n      setFormValues(prevState => ({\n        ...prevState,\n        sex: values.sex,\n        location: values.location,\n        price: values.price,\n        avatar: values.avatar,\n        comments: values.comments,\n      }));\n      handleSubmit();\n    }\n  };\n\n  // Update disabled state based on form field validation\n  useEffect(() => {\n    const formErrors = validateFields();\n    setIsDisabled(Object.keys(formErrors).length > 0);\n  }, [values, selectedCategory, validateFields]); //  When any of these values change, the effect will run again to update the disabled state\n\n  return (\n    <>\n      <MoreInfoStepContainer selectedCategory={selectedCategory}>\n        <SexAvatarFieldWrapper selectedCategory={selectedCategory}>\n          {/* Fields are for all categories except  the category 'your-pet' */}\n          {selectedCategory !== 'your-pet' && (\n            <div>\n              <SexFieldTitle>The sex</SexFieldTitle>\n              <SexRadioButtonsWrapper>\n                <RadioButton\n                  id=\"female\"\n                  type=\"radio\"\n                  name=\"sex\"\n                  value=\"female\"\n                  checked={values.sex === 'female'}\n                />\n                <SexLabel htmlFor=\"female\">\n                  <svg width={24} height={24}>\n                    <use href={icons + '#female'} />\n                  </svg>\n                  Female\n                </SexLabel>\n                <RadioButton\n                  id=\"male\"\n                  type=\"radio\"\n                  name=\"sex\"\n                  value=\"male\"\n                  checked={values.sex === 'male'}\n                />\n                <SexLabel htmlFor=\"male\">\n                  <svg width={24} height={24}>\n                    <use href={icons + '#male'} />\n                  </svg>\n                  Male\n                </SexLabel>\n              </SexRadioButtonsWrapper>\n              <ErrorMessage\n                name=\"sex\"\n                component=\"div\"\n                className=\"error-message\"\n              />\n            </div>\n          )}\n          <AvatarLabel selectedCategory={selectedCategory}>\n            Load the pet’s image:\n            <AvatarWrapper>\n              {!values.avatar ? (\n                <svg width={182} height={182}>\n                  <use href={icons + '#defaultAvatar'} />\n                </svg>\n              ) : (\n                <img\n                  src={URL.createObjectURL(values.avatar)}\n                  alt=\"Pet's avatar\"\n                />\n              )}\n              <AvatarField\n                accept=\"image/*\"\n                name=\"avatar\"\n                type=\"file\"\n                onChange={handleChange}\n              />\n            </AvatarWrapper>\n          </AvatarLabel>\n          <ErrorMessage\n            name=\"avatar\"\n            component=\"div\"\n            className=\"error-message\"\n          />\n        </SexAvatarFieldWrapper>\n        <LocationPriceCommentFieldWrapper>\n          {selectedCategory !== 'your-pet' && (\n            <div>\n              <MoreInfoStepLabel>\n                Location\n                <MoreInfoStepInput\n                  type=\"text\"\n                  name=\"location\"\n                  placeholder=\"Type of location\"\n                />\n              </MoreInfoStepLabel>\n              <ErrorMessage\n                name=\"location\"\n                component=\"div\"\n                className=\"error-message\"\n              />\n            </div>\n          )}\n\n          {/* Field \"price\" is only for the \"sell\" category */}\n          {selectedCategory === 'sell' && (\n            <div>\n              <MoreInfoStepLabel>\n                Price\n                <MoreInfoStepInput\n                  type=\"number\"\n                  min=\"0\"\n                  name=\"price\"\n                  placeholder=\"Type of price\"\n                />\n              </MoreInfoStepLabel>\n              <ErrorMessage\n                name=\"price\"\n                component=\"div\"\n                className=\"error-message\"\n              />\n            </div>\n          )}\n\n          {/* Field \"comments\" for additional comments */}\n          <div>\n            <MoreInfoStepLabel>\n              Comments\n              <MoreInfoStepTextArea\n                name=\"comments\"\n                placeholder=\"Type breed\"\n                component=\"textarea\"\n                category={selectedCategory}\n              ></MoreInfoStepTextArea>\n            </MoreInfoStepLabel>\n            <ErrorMessage\n              name=\"comments\"\n              component=\"div\"\n              className=\"error-message\"\n            />\n          </div>\n        </LocationPriceCommentFieldWrapper>\n      </MoreInfoStepContainer>\n      <AddPetFormButtonWrapper>\n        {/* Button to navigate to the previous step */}\n        {/* Button to navigate to the previous step */}\n        <BackLink\n          type=\"button\"\n          buttonText=\"Back\"\n          handleClick={onBack}\n          isLink={false}\n        />\n        {/* Button to submit the form */}\n        <AddPetFormNextButton\n          type=\"submit\"\n          onClick={handleSubmitClick}\n          disabled={isDisabled}\n          buttonText=\"Done\"\n        />\n      </AddPetFormButtonWrapper>\n    </>\n  );\n};\n\nexport default MoreInfoStep;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-right: auto;\n  margin-left: auto;\n  margin-top: 20px;\n  width: 100%;\n  min-height: 496px;\n  padding: 20px 8px 17px;\n  background-color: var(--cl-almost-white);\n  box-shadow: var(--shadow-default);\n  border-radius: 40px;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 60px;\n    width: fit-content;\n    min-height: 542px;\n    padding: 20px 32px;\n\n    ${({ step }) => (step === 1 || step === 2 ? 'width: 458px' : '')}\n  }\n`;\n\nexport const FormTitle = styled.h1`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: calc(27 / 20);\n  padding-left: 20px;\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 28px;\n    line-height: calc(38 / 28);\n    padding-left: 32px;\n  }\n`;\n\nexport const Stepper = styled.ul`\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  font-size: 10px;\n  line-height: calc(14 / 10);\n  gap: 11px;\n  margin-bottom: 24px;\n  color: var(--cl-gray);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: calc(26 / 16);\n    margin-bottom: 40px;\n  }\n`;\n\nexport const StepperItem = styled.li`\n  position: relative;\n  padding-bottom: 20px;\n  flex-basis: calc((100% - 22px) / 3);\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n\n    width: 100%;\n    height: 8px;\n\n    background-color: var(--cl-blue-light);\n    border-radius: 8px;\n  }\n\n  &.active {\n    color: var(--cl-blue-link); /* Style for the active step */\n  }\n\n  &.active::after {\n    background-color: var(--cl-blue-link);\n  }\n\n  &.completed {\n    color: var(--cl-green); /* Style for the completed step */\n  }\n\n  &.completed::after {\n    background-color: var(--cl-green);\n  }\n`;\n","// Компонент містить в собі форму, що складається з наступних кроків:\n// - Сhoose option - на якому користувач обирає категорію оголошення\n// - Personal Details - на якому користувач заповнює детальну інформацію про улюбленця (імʼя, дату народження та його породу)\n// - More info - на якому користувач додає фотокартку улюбленця та особисті коментарі\n// Кнопка Cancel переадресовує користувача на сторінку, з якої він до того перейшов на сторінку AddPetPage.\n// Кнопка Next - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - користувач переходить до наступного кроку заповнення форми. У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлень\n// Кнопка Back - повертає користувача на попередній крок заповнення форми з полями, заповненими інформацією, яку ввів користувач до того\n// Кнопка Done - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд про створення картки з особистим домашнім улюбленцем користувача або про створення оголошення (в залежності від обраної користувачем категорії). У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлень\n// Всі поля форми обов'язкові до заповнення\n// Після успішного створення картки, користувача необхідно переадресувата на сторінку UserPage або на сторінку NoticesPage (в залженості від обраної користувачем категорії). Якщо з бекенда було отримано помилку при створенні картки - користувачу необхідно вивести відповідну інформацію у вигляді нотіфікації\n\nimport { useState, useRef } from 'react';\nimport { Formik, Form } from 'formik';\nimport { object, string, mixed, number } from 'yup';\nimport CategoryStep from 'components/CategoryStep/CategoryStep';\nimport PersonalDetailsStep from 'components/PersonalDetailsStep/PersonalDetailsStep';\nimport MoreInfoStep from 'components/MoreInfoStep/MoreInfoStep';\nimport {\n  FormContainer,\n  FormTitle,\n  Stepper,\n  StepperItem,\n} from './AddPetForm.styled';\n\n//   Validation schema using Yup\nconst validationSchema = object().shape({\n  category: string().oneOf(['your-pet', 'sell', 'lost-found', 'for-free']),\n  name: string()\n    .required('Name is required')\n    .min(2, 'Name must be at least 2 characters')\n    .max(16, 'Name must be at most 16 characters'),\n  date: string()\n    .required('Date is required')\n    .matches(\n      /^\\s*(3[01]|[12][0-9]|0?[1-9])\\.(1[012]|0?[1-9])\\.((?:19|20)\\d{2})\\s*$/,\n      'Date must be in the format DD.MM.YYYY'\n    ),\n  breed: string()\n    .min(2, 'Breed must be at least 2 characters')\n    .max(16, 'Breed must be at most 16 characters')\n    .required('Breed is required'),\n  avatar: mixed()\n    .required('File is required')\n    //the test method from Yup to define a custom validation rule for the avatar field. The test checks if the value exists  (a file is selected) and if its size is less than or equal to 3MB (3 * 1024 * 1024 bytes). If the test fails, it will display the error message \"File size must not exceed 3MB\".\n    .test(\n      'fileSize',\n      'File size must not exceed 3MB',\n      value => value.size <= 3 * 1024 * 1024\n    ),\n  sex: string().when('category', {\n    is: value => ['sell', 'lost-found', 'for-free'].includes(value),\n    then: string()\n      .required('Sex is required')\n      .oneOf(['male', 'female'], 'Please select either \"male\" or \"female\"'),\n  }),\n\n  location: string()\n    .matches(\n      /^([a-zA-Z\\u0080-\\u024F]+(?:. |-| |'))*[a-zA-Z\\u0080-\\u024F]*$/,\n      'Invalid location format. Please use city names only.'\n    )\n    .min(2, 'City name must be at least 2 characters')\n    .required('Location is required'),\n  price: number()\n    .min(0, 'Price must be a positive number')\n    .integer('Price must be an integer')\n    .required('Price is required'),\n  comments: string()\n    .min(8, 'Comments must be at least 8 characters')\n    .max(120, 'Comments must be at most 120 characters')\n    .required('Comments are required'),\n\n  title: string()\n    .min(2, 'Title must be at least 2 characters')\n    .required('Title is required'),\n});\n\nconst AddPetForm = () => {\n  const [step, setStep] = useState(1);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [completedSteps, setCompletedSteps] = useState([]);\n  const formikRef = useRef(null);\n\n  const [formValues, setFormValues] = useState({\n    category: selectedCategory,\n    name: '',\n    date: '',\n    breed: '',\n    avatar: '',\n    sex: '',\n    location: '',\n    price: '',\n    comments: '',\n    title: '',\n  });\n  const steps = ['Choose Option', 'Personal Details', 'More Info'];\n\n  const stepTitles = {\n    1: 'Add pet',\n    2: {\n      'your-pet': 'Add my pet',\n      sell: 'Add pet for sell',\n      'lost-found': 'Add lost or found pet',\n      'for-free': 'Add pet for adoption',\n    },\n    3: {\n      'your-pet': 'Add my pet',\n      sell: 'Add pet for sell',\n      'lost-found': 'Add lost or found pet',\n      'for-free': 'Add pet for adoption',\n    },\n  };\n\n  // Function to handle category selection\n  const handleCategorySelect = category => {\n    setSelectedCategory(category);\n    setFormValues(prevFormValues => ({\n      ...prevFormValues,\n      category: category,\n    }));\n  };\n\n  const currentTitle =\n    typeof stepTitles[step] === 'string' ? stepTitles[step] : ''; // code checks if stepTitles[step] is a string, and if it is, assigns it to currentTitle.  Otherwise, it assigns an empty string.\n\n  const dynamicTitle =\n    step > 1\n      ? stepTitles[step][selectedCategory] || currentTitle\n      : currentTitle;\n\n  const handleNext = () => {\n    setCompletedSteps([...completedSteps, step]);\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const handleBack = () => {\n    setStep(prevStep => prevStep - 1);\n  };\n\n  const handleSubmit = () => {\n    const formData = new FormData();\n    // const { resetForm } = formikRef.current;\n\n    formData.append('category', formValues.category);\n    formData.append('name', formValues.name);\n    formData.append('date', formValues.date);\n    formData.append('breed', formValues.breed);\n    formData.append('avatar', formValues.avatar);\n    formData.append('comments', formValues.comments);\n\n    if (formValues.category === 'your-pet') {\n      for (let pair of formData.entries()) {\n        console.log(pair[0] + ': ' + pair[1]);\n      }\n\n      // dispatch(addMyPet(formData))\n      // resetForm();\n      return;\n    }\n\n    formData.append('title', formValues.title);\n    formData.append('sex', formValues.sex);\n    formData.append('location', formValues.location);\n\n    if (formValues.category === 'lost-found') {\n      for (let pair of formData.entries()) {\n        console.log(pair[0] + ': ' + pair[1]);\n      }\n\n      // dispatch(addNotice({ category: 'lost-found', formData }));\n      // resetForm();\n      return;\n    }\n\n    if (formValues.category === 'for-free') {\n      for (let pair of formData.entries()) {\n        console.log(pair[0] + ': ' + pair[1]);\n      }\n\n      // dispatch(addNotice({ category: 'in-good-hands', formData }));\n\n      // resetForm();\n      return;\n    }\n\n    formData.append('price', formValues.price);\n\n    if (formValues.category === 'sell') {\n      for (let pair of formData.entries()) {\n        console.log(pair[0] + ': ' + pair[1]);\n      }\n\n      // dispatch(addNotice({ category: 'sell', formData }));\n      // resetForm();\n      return;\n    }\n  };\n\n  const renderStepContent = step => {\n    switch (step) {\n      case 1:\n        return (\n          <CategoryStep\n            onNext={handleNext}\n            onSelectCategory={handleCategorySelect}\n            selectedCategory={selectedCategory}\n          />\n        );\n      case 2:\n        return (\n          <PersonalDetailsStep\n            onBack={handleBack}\n            onNext={handleNext}\n            selectedCategory={selectedCategory}\n            setFormValues={setFormValues}\n          />\n        );\n      case 3:\n        return (\n          <MoreInfoStep\n            onBack={handleBack}\n            selectedCategory={selectedCategory}\n            setFormValues={setFormValues}\n            handleSubmit={handleSubmit}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <FormContainer step={step}>\n      <FormTitle>{dynamicTitle}</FormTitle>\n      <Stepper>\n        {steps.map((name, index) => (\n          <StepperItem\n            key={index}\n            className={\n              step === index + 1\n                ? 'active'\n                : completedSteps.includes(index + 1)\n                ? 'completed'\n                : ''\n            }\n          >\n            {name}\n          </StepperItem>\n        ))}\n      </Stepper>\n      <Formik\n        initialValues={formValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        innerRef={formikRef}\n      >\n        {() => <Form>{renderStepContent(step)}</Form>}\n      </Formik>\n    </FormContainer>\n  );\n};\n\nexport default AddPetForm;\n","// Компонент рендериться на маршрут /add-pet\n\nimport AddPetForm from 'components/AddPetForm/AddPetForm';\n\nconst AddPetPage = () => {\n  return (\n    <div>\n      <AddPetForm />\n    </div>\n  );\n};\n\nexport default AddPetPage;\n"],"names":["BackButton","css","StyledLink","styled","Link","AddPetBackButton","isLink","buttonText","to","handleClick","type","onClick","width","height","href","icons","CategoryStepContainer","RadioButton","Field","CategoryStepLabel","NextButton","PawIcon","AddPetFormButtonWrapper","onNext","onSelectCategory","selectedCategory","location","useLocation","locRef","useRef","state","from","useState","isDisabled","setIsDisabled","useEffect","handleCategoryChange","event","target","value","name","id","checked","onChange","htmlFor","current","disabled","PersonalDetailsStepContainer","PersonalDetailsField","PersonalDetailsStepLabel","PersonalDetailsStepInput","onBack","setFormValues","useFormikContext","values","setTouched","validateFields","useCallback","formErrors","title","date","breed","length","Object","keys","placeholder","component","className","prevState","MoreInfoStepContainer","SexAvatarFieldWrapper","LocationPriceCommentFieldWrapper","SexFieldTitle","SexRadioButtonsWrapper","SexLabel","AvatarLabel","AvatarWrapper","AvatarField","MoreInfoStepLabel","Input","MoreInfoStepInput","MoreInfoStepTextArea","category","handleSubmit","setFieldValue","console","log","sex","price","avatar","comments","src","URL","createObjectURL","alt","accept","files","min","FormContainer","step","FormTitle","Stepper","StepperItem","validationSchema","object","shape","string","oneOf","required","max","matches","mixed","test","size","when","is","includes","then","number","integer","setStep","setSelectedCategory","completedSteps","setCompletedSteps","formikRef","formValues","stepTitles","sell","handleCategorySelect","prevFormValues","currentTitle","dynamicTitle","handleNext","prevStep","handleBack","formData","FormData","append","entries","pair","renderStepContent","map","index","initialValues","onSubmit","innerRef"],"sourceRoot":""}