{"version":3,"file":"static/js/327.99e86c57.chunk.js","mappings":"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","sources":["components/AuthFormRegister/AuthFormRegister.styled.jsx","components/AuthFormLogin/AuthFormLogin.js","components/LoginPage/LoginPage.js","pages/Login.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 80px;\n  width: 280px;\n  box-shadow: var(--shadow-default);\n  border-radius: 40px;\n  background-color: ${(props) => props.theme === 'day' ? 'var(--cl-background)' : '#111'};\n  padding: 40px 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: ${(props) => props.theme === 'day' ? 'var(--cl-background)' : '#111'};\n`;\n\nexport const Box = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n  width: 100%;\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n    margin-bottom: 52px;\n  }\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-style: normal;\n  font-size: 24px;\n  line-height: 33px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  color: ${(props) => props.theme === 'day' ? 'var(--cl-black)' : '#fff'};\n\n  @media screen and (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 49px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-style: normal;\n  height: 48px;\n  font-size: 16px;\n  padding: 12px 16px;\n  width: 100%;\n  border: 1px solid\n    ${props => {\n      if (props.error) {\n        return 'var(--cl-red)';\n      } else if (props.value && !props.error) {\n        return 'var(--cl-green)';\n      } else {\n        return 'var(--cl-blue-link)';\n      }\n    }};\n  border-radius: 40px;\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 52px;\n  left: 18px;\n  font-size: 12px;\n  font-weight: 400;\n  color: var(--cl-red);\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  text-align: left;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  gap: 4px;\n  font-size: 16px;\n  line-height: 1.2;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  width: 100%;\n  border: none;\n  border-radius: 40px;\n  height: 48px;\n  cursor: pointer;\n  background: #54adff;\n  margin-bottom: 24px;\n  color: var(--cl-almost-white);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-style: normal;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: var(--cl-gray);\n`;\n\nexport const Span = styled.span`\n  margin-left: 3px;\n`;\n\nexport const Link = styled(NavLink)`\n  color: var(--cl-blue-link);\n  line-height: 16px;\n`;\n\nexport const IconPas = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 12px;\n  right: 15px;\n`;\n\nexport const SVG = styled.svg`\n  margin-left: 8px;\n  fill: transparent;\n  stroke: var(--cl-blue-link);\n`;\n\nexport const IconOkValidate = styled.span`\n  ${props => {\n    if (props.value && !props.error) {\n      return `position: absolute;\n    cursor: pointer;\n  top: 12px;\n  right: 45px;`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconOkValidateMail = styled.span`\n  ${props => {\n    if (props.value && !props.error) {\n      return `position: absolute;\n    cursor: pointer;\n  top: 12px;\n  right: 15px;`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const TextOkValidation = styled.div`\n  ${props => {\n    if (props.value && !props.error) {\n      return `  position: absolute;\n  top: 52px;\n  left: 18px;\n  font-size: 12px;\n  font-weight: 400;\n  color: var(--cl-green);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconErrorValidateMail = styled.span`\n  ${props => {\n    if (props.error) {\n      return `position: absolute;\n  top: 12px;\n  right: 15px;\n  color: var(--cl-red);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconErrorValidate = styled.span`\n  ${props => {\n    if (props.error) {\n      return `position: absolute;\n  top: 12px;\n  right: 45px;\n  color: var(--cl-red);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n","// Компонент містить в собі форму з полями логінізації та кнопкою Login і елементом навігації Register\n//  - кнопка Login - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд щодо авторизації користувача.  У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлення\n//  - елемент навігації Register - переадресовує користувача на сторінку RegisterPage\n\n//  Всі поля форми валідуються і виводять користувачу відповідну інформацію у випадку, якщо введене значення не валідне\n\n//  Після авторизації користувач повинен бути переадресований на сторінку UserPage. Якщо з бекенда було отримано помилку авторизації - користувачу необхідно вивести  відповідну інформацію і вигляді нотіфікації\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userLogin } from 'Redux/auth/operation';\nimport { Navigate } from 'react-router-dom';\nimport { getAuthLoading, getConnect } from 'Redux/auth/selector';\nimport { Loader } from 'components/Loader/Loader';\nimport icons from 'images/icons.svg';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Link,\n  Span,\n  Text,\n  Title,\n  Wrapper,\n  StyledForm,\n  Input,\n  Error,\n  Label,\n  IconPas,\n  SVG,\n  IconOkValidate,\n  IconOkValidateMail,\n  TextOkValidation,\n  IconErrorValidateMail,\n  IconErrorValidate,\n} from '../AuthFormRegister/AuthFormRegister.styled';\n\nconst yupLoginValidation = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .email('Enter a Vaid Email')\n    .required('Email is Required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must contain one capital letter and one number'\n    )\n    .min(6, 'Password Should be minimum 8 character')\n    .max(16, 'Too long')\n    .required('Enter Your Password'),\n});\n\nconst eyeCosed = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-closed'}></use>\n    </SVG>\n  );\n};\n\nconst eyeOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-open'}></use>\n    </SVG>\n  );\n};\n\nexport const LogForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(eyeCosed);\n  const [typePass, setTypePass] = useState('password');\n  const isLoad = useSelector(getAuthLoading);\n  const theme = useSelector(state => state.main.theme)\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(eyeOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(eyeCosed);\n    }\n  };\n\n  const initialValue = {\n    email: '',\n    password: '',\n  };\n\n  const dispatch = useDispatch();\n  const handleSubmit = (values, props) => {\n    dispatch(userLogin(values));\n    props.resetForm();\n  };\n\n  const isConnect = useSelector(getConnect);\n\n  if (isConnect) {\n    return <Navigate to=\"/user\" replace />;\n  }\n\n  return (\n    <Wrapper theme={theme}>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={yupLoginValidation}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          return (\n            <StyledForm theme={theme}>\n              <Title theme={theme}>Login</Title>\n              <Box>\n                <Label>\n                  <Input\n                    placeholder=\"Email\"\n                    label=\"Email\"\n                    type=\"Email\"\n                    name=\"email\"\n                    error={props.errors.email}\n                    value={props.values.email}\n                  />\n                  <IconErrorValidateMail\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#error'}></use>\n                    </svg>\n                  </IconErrorValidateMail>\n                  <IconOkValidateMail\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#shape'}></use>\n                    </svg>\n                  </IconOkValidateMail>\n                  <TextOkValidation\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    Mail is secure\n                  </TextOkValidation>\n                  <Error component=\"div\" name=\"email\" />\n                </Label>\n                <Label>\n                  <Input\n                    placeholder=\"Password\"\n                    label=\"Password\"\n                    name=\"password\"\n                    type={typePass}\n                    error={props.errors.password}\n                    value={props.values.password}\n                  />\n                  <IconPas onClick={togglePassInput}>{toggleIconPass}</IconPas>\n                  <IconErrorValidate\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#error'}></use>\n                    </svg>\n                  </IconErrorValidate>\n                  <IconOkValidate\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#shape'}></use>\n                    </svg>\n                  </IconOkValidate>\n                  <TextOkValidation\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    Password is secure\n                  </TextOkValidation>\n                  <Error component=\"div\" name=\"password\" />\n                </Label>\n              </Box>\n              <Button type=\"submit\">\n                Login\n              </Button>\n                {isLoad && <Loader/>}\n              <Text>\n                Already have an account?\n                <Span>\n                  <Link to=\"/register\">Registration</Link>\n                </Span>\n              </Text>\n            </StyledForm>\n          );\n        }}\n      </Formik>\n    </Wrapper>\n  );\n};\n","// Компонент рендериться на маршрут /login\n// Сторінка логінізації містить в собі компонент AuthForm\n\nimport { LogForm } from \"components/AuthFormLogin/AuthFormLogin\";\n\nexport const LoginPages = LogForm","import { LoginPages } from \"components/LoginPage/LoginPage\";\n\nconst LoginPage = () => {\n  return (\n    <LoginPages/>\n\n  );\n};\n\nexport default LoginPage;"],"names":["Wrapper","styled","props","theme","StyledForm","Form","Box","Title","Input","Field","error","value","Error","ErrorMessage","Label","Button","Text","Span","Link","NavLink","IconPas","SVG","IconOkValidate","IconOkValidateMail","TextOkValidation","IconErrorValidateMail","IconErrorValidate","yupLoginValidation","yup","shape","email","matches","required","password","min","max","eyeCosed","width","height","href","icons","eyeOpen","LoginPages","useState","toggleIconPass","setToggleIconPass","typePass","setTypePass","isLoad","useSelector","getAuthLoading","state","main","togglePassInput","e","dispatch","useDispatch","getConnect","to","replace","initialValues","validationSchema","onSubmit","values","userLogin","resetForm","placeholder","label","type","name","errors","component","onClick","Loader"],"sourceRoot":""}