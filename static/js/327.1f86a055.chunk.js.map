{"version":3,"file":"static/js/327.1f86a055.chunk.js","mappings":"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","sources":["components/AuthFormRegister/AuthFormRegister.styled.jsx","components/AuthFormLogin/AuthFormLogin.js","components/LoginPage/LoginPage.js","pages/Login.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 80px;\n  width: 280px;\n  box-shadow: var(--shadow-default);\n  border-radius: 40px;\n  background-color: var(--cl-almost-white);\n  padding: 40px 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Box = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n  width: 100%;\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n    margin-bottom: 52px;\n  }\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-style: normal;\n  font-size: 24px;\n  line-height: 33px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  color: var(--cl-black);\n\n  @media screen and (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 49px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-style: normal;\n  height: 48px;\n  font-size: 16px;\n  padding: 12px 16px;\n  width: 100%;\n  border: 1px solid\n    ${props => {\n      if (props.error) {\n        return 'var(--cl-red)';\n      } else if (props.value && !props.error) {\n        return 'var(--cl-green)';\n      } else {\n        return 'var(--cl-blue-link)';\n      }\n    }};\n  border-radius: 40px;\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 52px;\n  left: 18px;\n  font-size: 12px;\n  font-weight: 400;\n  color: var(--cl-red);\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  text-align: left;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  gap: 4px;\n  font-size: 16px;\n  line-height: 1.2;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  width: 100%;\n  border: none;\n  border-radius: 40px;\n  height: 48px;\n  cursor: pointer;\n  background: #54adff;\n  margin-bottom: 24px;\n  color: var(--cl-almost-white);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-style: normal;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: var(--cl-gray);\n`;\n\nexport const Span = styled.span`\n  margin-left: 3px;\n`;\n\nexport const Link = styled(NavLink)`\n  color: var(--cl-blue-link);\n  line-height: 16px;\n`;\n\nexport const IconPas = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 12px;\n  right: 15px;\n`;\n\nexport const SVG = styled.svg`\n  margin-left: 8px;\n  fill: transparent;\n  stroke: var(--cl-blue-link);\n`;\n\nexport const IconOkValidate = styled.span`\n  ${props => {\n    if (props.value && !props.error) {\n      return `position: absolute;\n    cursor: pointer;\n  top: 12px;\n  right: 45px;`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconOkValidateMail = styled.span`\n  ${props => {\n    if (props.value && !props.error) {\n      return `position: absolute;\n    cursor: pointer;\n  top: 12px;\n  right: 15px;`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const TextOkValidation = styled.div`\n  ${props => {\n    if (props.value && !props.error) {\n      return `  position: absolute;\n  top: 52px;\n  left: 18px;\n  font-size: 12px;\n  font-weight: 400;\n  color: var(--cl-green);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconErrorValidateMail = styled.span`\n  ${props => {\n    if (props.error) {\n      return `position: absolute;\n  top: 12px;\n  right: 15px;\n  color: var(--cl-red);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const IconErrorValidate = styled.span`\n  ${props => {\n    if (props.error) {\n      return `position: absolute;\n  top: 12px;\n  right: 45px;\n  color: var(--cl-red);`;\n    } else {\n      return 'display: none;';\n    }\n  }}\n`;\n\nexport const LoaderStyle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 0px;`;\n\n","// Компонент містить в собі форму з полями логінізації та кнопкою Login і елементом навігації Register\n//  - кнопка Login - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд щодо авторизації користувача.  У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлення\n//  - елемент навігації Register - переадресовує користувача на сторінку RegisterPage\n\n//  Всі поля форми валідуються і виводять користувачу відповідну інформацію у випадку, якщо введене значення не валідне\n\n//  Після авторизації користувач повинен бути переадресований на сторінку UserPage. Якщо з бекенда було отримано помилку авторизації - користувачу необхідно вивести  відповідну інформацію і вигляді нотіфікації\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userLogin } from 'Redux/auth/operation';\nimport { Navigate } from 'react-router-dom';\nimport { getConnect } from 'Redux/auth/selector';\nimport { Hearts } from 'react-loader-spinner';\n\nimport icons from 'images/icons.svg';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Link,\n  Span,\n  Text,\n  Title,\n  Wrapper,\n  StyledForm,\n  Input,\n  Error,\n  Label,\n  IconPas,\n  SVG,\n  IconOkValidate,\n  IconOkValidateMail,\n  TextOkValidation,\n  IconErrorValidateMail,\n  IconErrorValidate,\n  LoaderStyle,\n} from '../AuthFormRegister/AuthFormRegister.styled';\n\nconst yupLoginValidation = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .email('Enter a Vaid Email')\n    .required('Email is Required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must contain one capital letter and one number'\n    )\n    .min(6, 'Password Should be minimum 8 character')\n    .max(16, 'Too long')\n    .required('Enter Your Password'),\n});\n\nconst eyeCosed = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-closed'}></use>\n    </SVG>\n  );\n};\n\nconst eyeOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-open'}></use>\n    </SVG>\n  );\n};\n\n      const Loader = () => {\n  return (\n    <LoaderStyle>\n      <Hearts\n        color=\"orange\"\n        strokeWidth=\"5\"\n        animationDuration=\"1.5\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderStyle>\n  );\n};\n\nexport const LogForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(eyeCosed);\n  const [typePass, setTypePass] = useState('password');\n  const [isLoad, setIsLoad] = useState();\n\n  const onLoader = e => {\n   setIsLoad( Loader)\n  }\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(eyeOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(eyeCosed);\n    }\n  };\n\n  const initialValue = {\n    email: '',\n    password: '',\n  };\n\n  const dispatch = useDispatch();\n  const handleSubmit = (values, props) => {\n    dispatch(userLogin(values));\n    props.resetForm();\n  };\n\n\n  const isConnect = useSelector(getConnect);\n  if (isConnect) {\n    return <Navigate to=\"/user\" replace />;\n  }\n\n\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={yupLoginValidation}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          return (\n            <StyledForm>\n              <Title>Login</Title>\n              <Box>\n                <Label>\n                  <Input\n                    placeholder=\"Email\"\n                    label=\"Email\"\n                    type=\"Email\"\n                    name=\"email\"\n                    error={props.errors.email}\n                    value={props.values.email}\n                  />\n                  <IconErrorValidateMail\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#error'}></use>\n                    </svg>\n                  </IconErrorValidateMail>\n                  <IconOkValidateMail\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#shape'}></use>\n                    </svg>\n                  </IconOkValidateMail>\n                  <TextOkValidation\n                    value={props.values.email}\n                    error={props.errors.email}\n                  >\n                    Mail is secure\n                  </TextOkValidation>\n                  <Error component=\"div\" name=\"email\" />\n                </Label>\n                <Label>\n                  <Input\n                    placeholder=\"Password\"\n                    label=\"Password\"\n                    name=\"password\"\n                    type={typePass}\n                    error={props.errors.password}\n                    value={props.values.password}\n                  />\n                  <IconPas onClick={togglePassInput}>{toggleIconPass}</IconPas>\n                  <IconErrorValidate\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#error'}></use>\n                    </svg>\n                  </IconErrorValidate>\n                  <IconOkValidate\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    {' '}\n                    <svg width={24} height={24}>\n                      <use href={icons + '#shape'}></use>\n                    </svg>\n                  </IconOkValidate>\n                  <TextOkValidation\n                    value={props.values.password}\n                    error={props.errors.password}\n                  >\n                    Password is secure\n                  </TextOkValidation>\n                  <Error component=\"div\" name=\"password\" />\n                </Label>\n              </Box>\n\n              <Button type=\"submit\" onClick={onLoader}>\n{isLoad}\n                Login\n              </Button>\n              <Text>\n                Already have an account?\n                <Span>\n                  <Link to=\"/register\">Registration</Link>\n                </Span>\n              </Text>\n            </StyledForm>\n          );\n        }}\n      </Formik>\n    </Wrapper>\n  );\n};\n","// Компонент рендериться на маршрут /login\n// Сторінка логінізації містить в собі компонент AuthForm\n\nimport { LogForm } from \"components/AuthFormLogin/AuthFormLogin\";\n\nexport const LoginPages = LogForm","import { LoginPages } from \"components/LoginPage/LoginPage\";\n\nconst LoginPage = () => {\n  return (\n    <LoginPages/>\n\n  );\n};\n\nexport default LoginPage;"],"names":["Wrapper","styled","StyledForm","Form","Box","Title","Input","Field","props","error","value","Error","ErrorMessage","Label","Button","Text","Span","Link","NavLink","IconPas","SVG","IconOkValidate","IconOkValidateMail","TextOkValidation","IconErrorValidateMail","IconErrorValidate","LoaderStyle","yupLoginValidation","yup","shape","email","matches","required","password","min","max","eyeCosed","width","height","href","icons","eyeOpen","Loader","color","strokeWidth","animationDuration","visible","LoginPages","useState","toggleIconPass","setToggleIconPass","typePass","setTypePass","isLoad","setIsLoad","onLoader","e","togglePassInput","dispatch","useDispatch","useSelector","getConnect","to","replace","initialValues","validationSchema","onSubmit","values","userLogin","resetForm","placeholder","label","type","name","errors","component","onClick"],"sourceRoot":""}