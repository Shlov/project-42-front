{"version":3,"file":"static/js/52.86d66c85.chunk.js","mappings":"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","sources":["Redux/auth/operation.js","components/AuthFormRegister/AuthFormRegister.styled.jsx","components/AuthFormRegister/AuthFormRegister.js","pages/Register.js"],"sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n// default Axios URL\naxios.defaults.baseURL = '';\n\n// Utility to add JWT\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\n\n// Utility to remove JWT\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\n//Register\nexport const userReg = createAsyncThunk(\n  'auth/reg',\n  async (formData, thunkAPI) => {       \n    try {\n      const response = await axios.post('/register', formData);\n      setAuthHeader(response.data.token);\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n//Login\nexport const userLogin = createAsyncThunk(\n  'auth/login',\n  async (formData, thunkAPI) => {\n    console.log(formData)\n    try {\n      const response = await axios.post('/login', formData);\n      setAuthHeader(response.data.token);\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n */\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('/user/logout');\n    // After a successful logout, remove the token from the HTTP header\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 80px;\n  width: 280px;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  background-color: #ffffff;\n  padding: 40px 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Box = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n  width: 100%;\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n    margin-bottom: 52px;\n  }\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-style: normal;\n  font-size: 24px;\n  line-height: 33px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  color: #111111;\n\n  @media screen and (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 49px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-style: normal;\n  height: 48px;\n  font-size: 16px;\n  padding: 12px 16px;\n  width: 100%;\n  border: 1px solid #54adff;\n  border-radius: 40px;\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 52px;\n  left: 18px;\n  font-size: 12px;\n  font-weight: 400;\n  color: #f28d7c;\n`;\n\nexport const Label = styled.label`\nposition: relative;\n  display: flex;\n  text-align: left;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  gap: 4px;\n  font-size: 16px;\n  line-height: 1.2;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  width: 100%;\n  border: none;\n  border-radius: 40px;\n  height: 48px;\n  cursor: pointer;\n  background: #54adff;\n  margin-bottom: 24px;\n  color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-style: normal;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: #888888;\n`;\n\nexport const Span = styled.span`\n  margin-left: 3px;\n`;\n\nexport const Link = styled(NavLink)`  \n  color: #54adff;\n  line-height: 16px;\n`;\n\nexport const IconPas = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 12px;\n  right: 15px;\n`;\n\nexport const SVG = styled.svg`\n  margin-left: 8px;\n  fill: transparent;\n  stroke: #54adff;\n`;\n","// Компонент містить в собі форму з полями реєстрації та кнопкою Registration і елементом навігації Login\n//  - кнопка Registration - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд щодо реєстрації користувача.  У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлення\n//  - елемент навігації Login - переадресовує користувача на сторінку LoginPage.\n\n//  Всі поля форми валідуються і виводять користувачу відповідну інформацію у випадку, якщо введене значення невалідне\n\n//  Після реєстрації користувач повинен бути переадресований на сторінку UserPage з одночасним відкриттям модального вікна-вітання ModalCongrats. Якщо з бекенда було отримано помилку реєстрації - користувачу необхідно вивести  відповідну інформацію і вигляді нотіфікації \nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { userReg } from 'Redux/auth/operation';\nimport { useState } from 'react';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Link,\n  Span,\n  Text,\n  Title,\n  Wrapper,\n  StyledForm,\n  Input,\n  Error,\n  Label,\n  IconPas,\n  SVG,\n} from './AuthFormRegister.styled';\nimport icons from 'images/icons.svg';\n\nconst yupRegValidation = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .email('Enter a Vaid Email')\n    .required('Email is Required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must contain one capital letter and one number'\n    )\n    .min(6, 'Password Should be minimum 8 character')\n    .max(16, 'Too long')\n    .required('Enter Your Password'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Password does not matched')\n    .required('Confirm Password is Required'),\n});\n\nexport const eyeCosed = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-closed'}></use>\n    </SVG>\n  );\n};\n\nexport const eyeOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-open'}></use>\n    </SVG>\n  );\n};\n\nexport const RegForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(eyeCosed);\n  const [typePass, setTypePass] = useState('password');\n  const [toggleIconConfirm, setToggleIconConfirm] = useState(eyeCosed);\n  const [typeCofirm, setTypeCofirm] = useState('password');\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(eyeOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(eyeCosed);\n    }\n  };\n\n  const toggleConfirmInput = e => {\n    if (typeCofirm === 'password') {\n      setTypeCofirm('text');\n      setToggleIconConfirm(eyeOpen);\n    } else {\n      setTypeCofirm('password');\n      setToggleIconConfirm(eyeCosed);\n    }\n  };\n\n  const initialValue = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      userReg({\n        email: values.email,\n        password: values.password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={yupRegValidation}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <Title>Registration</Title>\n          <Box>\n            <Label>\n              <Input\n                placeholder=\"Email\"\n                label=\"Email\"\n                type=\"Email\"\n                name=\"email\"\n              />\n              <Error component=\"div\" name=\"email\" />\n            </Label>\n            <Label>\n              <Input\n                placeholder=\"Password\"\n                label=\"Password\"\n                name=\"password\"\n                type={typePass}\n              />\n              <IconPas onClick={togglePassInput}>{toggleIconPass}</IconPas>\n              <Error component=\"div\" name=\"password\" /> \n            </Label>\n            <Label>\n              <Input\n                placeholder=\"Confirm Password\"\n                label=\"Confirm Password\"\n                name=\"confirmPassword\"\n                type={typeCofirm}\n              />\n              <IconPas onClick={toggleConfirmInput}>\n                {toggleIconConfirm}\n              </IconPas>\n              <Error component=\"div\" name=\"confirmPassword\" />\n            </Label>\n          </Box>\n          <Button type=\"submit\">Registration</Button>\n          <Text>\n            Already have an account?\n            <Span>\n              <Link to=\"/login\">Login</Link>\n            </Span>\n          </Text>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n","import { RegForm } from \"components/AuthFormRegister/AuthFormRegister\";\n\nconst RegisterPage = () => {\n  return (\n    <RegForm/>\n  );\n};\n\nexport default RegisterPage;"],"names":["axios","setAuthHeader","token","userReg","createAsyncThunk","formData","thunkAPI","response","data","rejectWithValue","message","userLogin","console","log","logOut","_","Wrapper","styled","StyledForm","Form","Box","Title","Input","Field","Error","ErrorMessage","Label","Button","Text","Span","Link","NavLink","IconPas","SVG","yupRegValidation","yup","shape","email","matches","required","password","min","max","confirmPassword","oneOf","eyeCosed","width","height","href","icons","eyeOpen","RegForm","useState","toggleIconPass","setToggleIconPass","typePass","setTypePass","toggleIconConfirm","setToggleIconConfirm","typeCofirm","setTypeCofirm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","placeholder","label","type","name","component","onClick","e","to"],"sourceRoot":""}