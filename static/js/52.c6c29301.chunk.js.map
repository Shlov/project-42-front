{"version":3,"file":"static/js/52.c6c29301.chunk.js","mappings":"kQA6BMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJG,QAAQ,kCAAmC,8BAC3CD,MAAM,sBACNE,SAAS,qBACZC,SAAUL,EAAAA,KAEPG,QACC,sDACA,2DAEDG,IAAI,EAAG,0CACPC,IAAI,GAAI,YACRH,SAAS,uBACZI,gBAAiBR,EAAAA,KAEdS,MAAM,CAACT,EAAAA,GAAQ,aAAc,6BAC7BI,SAAS,kCAGDM,EAAW,WACtB,OACE,SAAC,KAAD,CAAKC,MAAO,GAAIC,OAAQ,GAAxB,UACE,gBAAKC,KAAMC,EAAAA,EAAQ,iBAGxB,EAEYC,EAAU,WACrB,OACE,SAAC,KAAD,CAAKJ,MAAO,GAAIC,OAAQ,GAAxB,UACE,gBAAKC,KAAMC,EAAAA,EAAQ,eAGxB,EAEYE,EAAU,WACrB,OAA4CC,EAAAA,EAAAA,UAASP,GAArD,eAAOQ,EAAP,KAAuBC,EAAvB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,YAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAkDJ,EAAAA,EAAAA,UAASP,GAA3D,eAAOY,EAAP,KAA0BC,EAA1B,KACA,GAAoCN,EAAAA,EAAAA,UAAS,YAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KA2BMC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEC,cAnBe,CACnB1B,MAAO,GACPG,SAAU,GACVG,gBAAiB,IAiBbqB,iBAAkB9B,EAClB+B,SAfe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GACEO,EAAAA,EAAAA,GAAQ,CACN/B,MAAO6B,EAAO7B,MACdG,SAAU0B,EAAO1B,YAGrB2B,GACD,EAIG,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,UAAO,kBACP,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEE,YAAY,QACZC,MAAM,QACNC,KAAK,QACLC,KAAK,WAEP,SAAC,KAAD,CAAOC,UAAU,MAAMD,KAAK,cAE9B,UAAC,KAAD,YACE,SAAC,KAAD,CACEH,YAAY,WACZC,MAAM,WACNE,KAAK,WACLD,KAAMhB,KAER,SAAC,KAAD,CAASmB,QA9DG,SAAAC,GACL,aAAbpB,GACFC,EAAY,QACZF,EAAkBJ,KAElBM,EAAY,YACZF,EAAkBT,GAErB,EAsDW,SAAoCQ,KACpC,SAAC,KAAD,CAAOoB,UAAU,MAAMD,KAAK,iBAE9B,UAAC,KAAD,YACE,SAAC,KAAD,CACEH,YAAY,mBACZC,MAAM,mBACNE,KAAK,kBACLD,KAAMZ,KAER,SAAC,KAAD,CAASe,QA9DM,SAAAC,GACN,aAAfhB,GACFC,EAAc,QACdF,EAAqBR,KAErBU,EAAc,YACdF,EAAqBb,GAExB,EAsDW,SACGY,KAEH,SAAC,KAAD,CAAOgB,UAAU,MAAMD,KAAK,2BAGhC,SAAC,KAAD,CAAQD,KAAK,SAAb,SAAsB,kBACtB,UAAC,KAAD,WAAM,4BAEJ,SAAC,KAAD,WACE,SAAC,KAAD,CAAMK,GAAG,SAAT,SAAkB,qBAO/B,ECzJD,EANqB,WACnB,OACE,SAACzB,EAAD,GAEH,C","sources":["components/AuthFormRegister/AuthFormRegister.js","pages/Register.js"],"sourcesContent":["// Компонент містить в собі форму з полями реєстрації та кнопкою Registration і елементом навігації Login\n//  - кнопка Registration - активізує перевірку на валідність введеної користувачем інформації. У разі їх валідності - відправляє запит на бекенд щодо реєстрації користувача.  У разі введення користувачем невалідних значень - візуалізувати це йому у вигляді повідомлення\n//  - елемент навігації Login - переадресовує користувача на сторінку LoginPage.\n\n//  Всі поля форми валідуються і виводять користувачу відповідну інформацію у випадку, якщо введене значення невалідне\n\n//  Після реєстрації користувач повинен бути переадресований на сторінку UserPage з одночасним відкриттям модального вікна-вітання ModalCongrats. Якщо з бекенда було отримано помилку реєстрації - користувачу необхідно вивести  відповідну інформацію і вигляді нотіфікації \nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { userReg } from 'Redux/auth/operation';\nimport { useState } from 'react';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Link,\n  Span,\n  Text,\n  Title,\n  Wrapper,\n  StyledForm,\n  Input,\n  Error,\n  Label,\n  IconPas,\n  SVG,\n} from './AuthFormRegister.styled';\nimport icons from 'images/icons.svg';\n\nconst yupRegValidation = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .email('Enter a Vaid Email')\n    .required('Email is Required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must contain one capital letter and one number'\n    )\n    .min(6, 'Password Should be minimum 8 character')\n    .max(16, 'Too long')\n    .required('Enter Your Password'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Password does not matched')\n    .required('Confirm Password is Required'),\n});\n\nexport const eyeCosed = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-closed'}></use>\n    </SVG>\n  );\n};\n\nexport const eyeOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#eye-open'}></use>\n    </SVG>\n  );\n};\n\nexport const RegForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(eyeCosed);\n  const [typePass, setTypePass] = useState('password');\n  const [toggleIconConfirm, setToggleIconConfirm] = useState(eyeCosed);\n  const [typeCofirm, setTypeCofirm] = useState('password');\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(eyeOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(eyeCosed);\n    }\n  };\n\n  const toggleConfirmInput = e => {\n    if (typeCofirm === 'password') {\n      setTypeCofirm('text');\n      setToggleIconConfirm(eyeOpen);\n    } else {\n      setTypeCofirm('password');\n      setToggleIconConfirm(eyeCosed);\n    }\n  };\n\n  const initialValue = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      userReg({\n        email: values.email,\n        password: values.password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={yupRegValidation}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <Title>Registration</Title>\n          <Box>\n            <Label>\n              <Input\n                placeholder=\"Email\"\n                label=\"Email\"\n                type=\"Email\"\n                name=\"email\"\n              />\n              <Error component=\"div\" name=\"email\" />\n            </Label>\n            <Label>\n              <Input\n                placeholder=\"Password\"\n                label=\"Password\"\n                name=\"password\"\n                type={typePass}\n              />\n              <IconPas onClick={togglePassInput}>{toggleIconPass}</IconPas>\n              <Error component=\"div\" name=\"password\" /> \n            </Label>\n            <Label>\n              <Input\n                placeholder=\"Confirm Password\"\n                label=\"Confirm Password\"\n                name=\"confirmPassword\"\n                type={typeCofirm}\n              />\n              <IconPas onClick={toggleConfirmInput}>\n                {toggleIconConfirm}\n              </IconPas>\n              <Error component=\"div\" name=\"confirmPassword\" />\n            </Label>\n          </Box>\n          <Button type=\"submit\">Registration</Button>\n          <Text>\n            Already have an account?\n            <Span>\n              <Link to=\"/login\">Login</Link>\n            </Span>\n          </Text>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n","import { RegForm } from \"components/AuthFormRegister/AuthFormRegister\";\n\nconst RegisterPage = () => {\n  return (\n    <RegForm/>\n  );\n};\n\nexport default RegisterPage;"],"names":["yupRegValidation","yup","shape","email","matches","required","password","min","max","confirmPassword","oneOf","eyeCosed","width","height","href","icons","eyeOpen","RegForm","useState","toggleIconPass","setToggleIconPass","typePass","setTypePass","toggleIconConfirm","setToggleIconConfirm","typeCofirm","setTypeCofirm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","userReg","placeholder","label","type","name","component","onClick","e","to"],"sourceRoot":""}